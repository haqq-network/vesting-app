{"mappings":"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","sources":["src/components/ConnectButton.tsx","src/components/AccountButton.tsx","src/components/Button.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { useAccount, useBalance, useConnect, useDisconnect } from 'wagmi';\nimport { AccountButton } from './AccountButton';\n\nexport function ConnectButton() {\n  const { isConnected, address } = useAccount();\n  const { connect, connectors } = useConnect();\n  const { data: balance } = useBalance({\n    addressOrName: address,\n    watch: true,\n  });\n  const { disconnect } = useDisconnect();\n\n  const handleConnect = useCallback(() => {\n    // console.log('onConnectClick', { connector });\n    connect({ connector: connectors[0] });\n  }, [connect, connectors]);\n\n  const handleDisconnect = useCallback(() => {\n    // console.log('handleDisconnect');\n    disconnect();\n  }, [disconnect]);\n\n  const account = useMemo(() => {\n    if (!isConnected || !address) {\n      return undefined;\n    }\n\n    return {\n      address,\n      balance,\n    };\n  }, [address, balance, isConnected]);\n\n  return (\n    <AccountButton\n      onConnectClick={handleConnect}\n      onDisconnectClick={handleDisconnect}\n      account={account}\n    />\n  );\n}\n\nexport { ConnectButton as default };\n","import React, { Fragment, ReactElement, ReactNode } from 'react';\nimport clsx from 'clsx';\nimport { Button } from './Button';\nimport { IdentIcon } from './IdentIcon';\nimport type { BigNumber } from 'ethers';\nimport { Menu, Transition } from '@headlessui/react';\n\nfunction AddressButton({\n  children,\n  onClick,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n  onClick?: () => void;\n}) {\n  const classNames = clsx(\n    'h-[36px] px-[8px] py-[6px] appearance-none outline-none',\n    'rounded-[6px] font-sans',\n    'flex flex-row space-x-[8px] justify-center items-center',\n    'bg-white hover:bg-white/90',\n    'transition-colors duration-150 ease-linear',\n    className,\n  );\n\n  return (\n    <button className={classNames} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nfunction BalanceButton({\n  children,\n  onClick,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n  onClick?: () => void;\n}) {\n  const classNames = clsx(\n    'font-serif text-base leading-[24px]',\n    'px-[20px] py-[8px] rounded-none',\n    'text-white bg-primary hover:bg-[#20d775]',\n    'transition-colors duration-150 ease-linear',\n    'rounded-l-[8px]',\n    className,\n  );\n\n  return (\n    <button className={classNames} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nexport interface AccountButtonProps {\n  account?: {\n    address: string;\n    balance?: {\n      decimals: number;\n      formatted: string;\n      symbol: string;\n      value: BigNumber;\n    };\n  };\n  symbol?: string;\n  onConnectClick?: () => void;\n  onDisconnectClick?: () => void;\n  onAddressClick?: () => void;\n  onBalanceClick?: () => void;\n}\n\nfunction getFormattedAddress(address: string) {\n  const lower = address.toLocaleLowerCase();\n  return `${lower.slice(0, 6)}...${lower.slice(-4)}`;\n}\n\nexport function AccountButton({\n  account,\n  onConnectClick,\n  onDisconnectClick,\n  // onAddressClick,\n  onBalanceClick,\n}: AccountButtonProps): ReactElement {\n  if (!account) {\n    return <Button onClick={onConnectClick}>Connect Wallet</Button>;\n  }\n\n  return (\n    <div className=\"flex flex-row\">\n      {account.balance && (\n        <BalanceButton onClick={onBalanceClick}>\n          <div className=\"mb-[-4px] font-bold\">\n            {Number.parseFloat(account.balance.formatted).toLocaleString()}{' '}\n            {account.balance.symbol.toLocaleUpperCase()}\n          </div>\n        </BalanceButton>\n      )}\n\n      <Menu as=\"div\" className=\"relative inline-block text-left\">\n        <Menu.Button as=\"div\" className=\"rounded-r-[8px] bg-primary p-[2px]\">\n          <AddressButton>\n            <div className=\"text-[14px] font-medium flex-1\">\n              {/* {`0x...${account.address.toLocaleLowerCase().slice(-4)}`} */}\n              {getFormattedAddress(account.address)}\n            </div>\n            <IdentIcon\n              address={account.address}\n              size={16}\n              className=\"flex-none\"\n            />\n          </AddressButton>\n        </Menu.Button>\n\n        <Transition\n          as={Fragment}\n          enter=\"transition ease-out duration-100\"\n          enterFrom=\"transform opacity-0 scale-95\"\n          enterTo=\"transform opacity-100 scale-100\"\n          leave=\"transition ease-in duration-75\"\n          leaveFrom=\"transform opacity-100 scale-100\"\n          leaveTo=\"transform opacity-0 scale-95\"\n        >\n          <Menu.Items className=\"absolute right-0 mt-2 w-40 origin-top-right divide-y divide-gray-100 rounded-md bg-white focus:outline-none shadow p-1\">\n            <Menu.Item\n              as=\"button\"\n              className=\"py-[6px] px-[12px] leading-[24px] hover:bg-light-green transition-colors duration-150 ease-in-out block w-full rounded-sm text-left\"\n              onClick={onDisconnectClick}\n            >\n              Disconnect\n            </Menu.Item>\n          </Menu.Items>\n        </Transition>\n      </Menu>\n    </div>\n  );\n}\n","import React, { ReactNode, SyntheticEvent } from 'react';\nimport clsx from 'clsx';\n\nexport interface ButtonProps {\n  children: ReactNode;\n  className?: string;\n  primary?: boolean;\n  outline?: boolean;\n  disabled?: boolean;\n  fill?: boolean;\n  type?: 'submit' | 'reset' | 'button';\n  onClick?: (event: SyntheticEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport function Button({\n  children,\n  onClick,\n  outline = false,\n  disabled = false,\n  fill = false,\n  type = 'button',\n  className,\n}: ButtonProps) {\n  const classNames = clsx(\n    outline\n      ? 'bg-transparent text-primary border-[2px] box-border border-solid border-primary hover:text-[#20d775] hover:border-[#20d775]'\n      : 'bg-primary text-white hover:bg-[#20d775]',\n    'text-base font-semibold font-sans leading-[24px]',\n    'rounded-[8px] py-[8px] px-[22px] appearance-none',\n    'transition-colors duration-150 ease-linear',\n    fill ? 'w-full' : 'inline-block',\n    { 'opacity-75 cursor-not-allowed': disabled },\n    className,\n  );\n\n  return (\n    <button\n      type={type}\n      disabled={disabled}\n      onClick={onClick}\n      className={classNames}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function DangerButton({\n  children,\n  onClick,\n  outline = false,\n  disabled = false,\n  fill = false,\n  type = 'button',\n  className,\n}: ButtonProps) {\n  const classNames = clsx(\n    outline\n      ? 'bg-transparent text-danger border-[2px] box-border border-solid border-danger hover:text-[#ff0000] hover:border-[#ff0000]'\n      : 'bg-danger text-white hover:bg-[#ff0000]',\n    'text-base font-semibold font-sans leading-[24px]',\n    'rounded-[8px] py-[8px] px-[22px] appearance-none',\n    'transition-colors duration-150 ease-linear',\n    fill ? 'w-full' : 'inline-block',\n    { 'opacity-75 cursor-not-allowed': disabled },\n    className,\n  );\n\n  return (\n    <button\n      type={type}\n      disabled={disabled}\n      onClick={onClick}\n      className={classNames}\n    >\n      {children}\n    </button>\n  );\n}\n"],"names":["$g1qy9","parcelRequire","ConnectButton","isConnected","address","useAccount","connect","connectors","useConnect","data","balance","useBalance","addressOrName","watch","disconnect","useDisconnect","handleConnect","useCallback","connector","handleDisconnect","account","useMemo","jsx","$19May","AccountButton","onConnectClick","onDisconnectClick","AddressButton","children","onClick","className","classNames","clsx","BalanceButton","getFormattedAddress","lower","toLocaleLowerCase","slice","onBalanceClick","jsxs","$2a17730976ea5d40$var$BalanceButton","Number","parseFloat","formatted","toLocaleString","symbol","toLocaleUpperCase","$2qAWR","Menu","as","Button","$2a17730976ea5d40$var$AddressButton","$bSZXL","IdentIcon","size","Transition","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Items","Item","$1cmhB","outline","disabled","fill","type"],"version":3,"file":"ConnectButton.6754b8bb.js.map"}