{"mappings":"uYAUA,MAAMA,GAAN,EAAAC,EAAAC,SAAA,OAAgBC,OAAA,YAAhB,CAAgB,IAMT,SAASC,GAAKC,SACnBA,EADmBC,UAEnBA,EAFmBC,WAGnBA,GAAa,IAEb,MAAMC,GAAaC,aAAK,oCAAqCH,GAE7D,OACE,EAAAI,EAAAC,KAACC,EAAD,CAAYN,UAAWE,EAAYD,WAAYA,E,SAC5CF,G,gICzBP,IAAAK,EAAAG,EAAA,S,4BAYO,SAASC,GAAQT,SACtBA,EADsBU,MAEtBA,EAAQ,EAFcT,UAGtBA,EAHsBU,MAItBA,IAEA,MAAMC,GAAmBR,aACvB,qDACA,CACE,aAAwB,YAAVO,EACd,iBAA4B,UAAVA,EAClB,aAAwB,UAAVA,EACd,eAA0B,YAAVA,GAElB,CACE,cAAyB,IAAVD,EACf,cAAyB,IAAVA,EACf,cAAyB,IAAVA,EACf,cAAyB,IAAVA,GAEjBT,GAGF,OAAQS,GACN,KAAK,EACH,OAAO,EAAAL,EAAAC,KAAC,KAAD,CAAIL,UAAWW,E,SAAmBZ,IAC3C,KAAK,EACH,OAAO,EAAAK,EAAAC,KAAC,KAAD,CAAIL,UAAWW,E,SAAmBZ,IAC3C,KAAK,EACH,OAAO,EAAAK,EAAAC,KAAC,KAAD,CAAIL,UAAWW,E,SAAmBZ,IAG3C,QACE,OAAO,EAAAK,EAAAC,KAAC,KAAD,CAAIL,UAAWW,E,SAAmBZ,I,CAexC,SAASa,GAAKb,SACnBA,EADmBC,UAEnBA,EAFmBa,OAGnBA,GAAS,EAHUC,UAInBA,GAAY,EAJOC,QAKnBA,GAAU,EALSC,KAMnBA,GAAO,EANYC,MAOnBA,GAAQ,EAPWP,MAQnBA,EAAQ,YAER,MAAMR,GAAaC,aACjB,YACA,CACE,aAAwB,YAAVO,EACd,iBAA4B,UAAVA,EAClB,aAAwB,UAAVA,EACd,eAA0B,YAAVA,GAElB,CACE,kBAAmBK,EACnB,iBAAkBA,GAEpB,CACED,UAAWA,EACX,YAAaE,EACbH,OAAQA,EACR,eAAgBI,GAElBjB,GAGF,OAAO,EAAAI,EAAAC,KAAC,OAAD,CAAML,UAAWE,E,SAAaH,G","sources":["src/components/Card.tsx","src/components/Typography.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport clsx from 'clsx';\nimport React, { ReactElement, ReactNode } from 'react';\n\ninterface CardProps {\n  children: ReactNode;\n  className?: string;\n  withShadow?: boolean;\n}\n\nconst CardStyled = styled.div<{ withShadow?: boolean }>`\n  /* box-shadow: ${({ withShadow }) => {\n    return withShadow ? '0px 8px 24px rgba(15, 30, 51, 0.08)' : 'none';\n  }}; */\n`;\n\nexport function Card({\n  children,\n  className,\n  withShadow = false,\n}: CardProps): ReactElement {\n  const classNames = clsx('bg-white rounded-[12px] shadow-sm', className);\n\n  return (\n    <CardStyled className={classNames} withShadow={withShadow}>\n      {children}\n    </CardStyled>\n  );\n}\n","import React, { ReactElement, ReactNode } from 'react';\nimport clsx from 'clsx';\n\ntype TypographyColor = 'primary' | 'default' | 'light' | 'white';\n\nexport interface HeadingProps {\n  children: ReactNode;\n  level?: 1 | 2 | 3 | 4;\n  className?: string;\n  color?: TypographyColor;\n}\n\nexport function Heading({\n  children,\n  level = 2,\n  className,\n  color,\n}: HeadingProps): ReactElement {\n  const headingClassName = clsx(\n    'font-serif font-bold tracking-normal leading-[1em]',\n    {\n      'text-black': color === 'default',\n      'text-dark-gray': color === 'light',\n      'text-white': color === 'white',\n      'text-primary': color === 'primary',\n    },\n    {\n      'text-[80px]': level === 1,\n      'text-[38px]': level === 2,\n      'text-[24px]': level === 3,\n      'text-[20px]': level === 4,\n    },\n    className,\n  );\n\n  switch (level) {\n    case 1:\n      return <h1 className={headingClassName}>{children}</h1>;\n    case 3:\n      return <h3 className={headingClassName}>{children}</h3>;\n    case 4:\n      return <h4 className={headingClassName}>{children}</h4>;\n\n    case 2:\n    default:\n      return <h2 className={headingClassName}>{children}</h2>;\n  }\n}\n\nexport interface TextProps {\n  children: ReactNode;\n  className?: string;\n  color?: TypographyColor;\n  italic?: boolean;\n  underline?: boolean;\n  bold?: boolean;\n  block?: boolean;\n  running?: boolean;\n}\n\nexport function Text({\n  children,\n  className,\n  italic = false,\n  underline = false,\n  running = false,\n  bold = false,\n  block = false,\n  color = 'default',\n}: TextProps): ReactElement {\n  const classNames = clsx(\n    'text-base',\n    {\n      'text-black': color === 'default',\n      'text-dark-gray': color === 'light',\n      'text-white': color === 'white',\n      'text-primary': color === 'primary',\n    },\n    {\n      'leading-relaxed': running,\n      'leading-tight': !running,\n    },\n    {\n      underline: underline,\n      'font-bold': bold,\n      italic: italic,\n      'inline-block': block,\n    },\n    className,\n  );\n\n  return <span className={classNames}>{children}</span>;\n}\n"],"names":["CardStyled","$8xGpt","default","target","Card","children","className","withShadow","classNames","clsx","$21Wcl","jsx","$bbeb2b9e3538e32e$var$CardStyled","parcelRequire","Heading","level","color","headingClassName","Text","italic","underline","running","bold","block"],"version":3,"file":"AccountWidget.587a2f9c.js.map"}