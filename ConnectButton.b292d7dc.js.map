{"mappings":"2dAAA,IAAAA,EAAAC,EAAA,S,oDAKO,SAASC,IACd,MAAMC,YAAEA,EAAFC,QAAeA,IAAYC,mBACzBC,KAAMC,IAAYC,gBAAW,CACnCC,cAAeL,EACfM,OAAO,KAEHC,WAAEA,IAAeC,sBACjBC,cAAEA,IAAkBC,qBAEpBC,GAAUC,cAAQ,KACtB,GAAKb,GAAgBC,EAIrB,MAAO,C,QACLA,E,QACAG,EAFF,GAIC,CAACH,EAASG,EAASJ,IAEtB,OACE,EAAAH,EAAAiB,KAACC,EAAAC,cAAD,CACEC,eAAgBP,EAChBQ,kBAAmBV,EACnBI,QAASA,G,2FC7Bf,IAAAf,EAAAC,EAAA,S,8EAQA,SAASqB,GAAcC,SACrBA,EADqBC,QAErBA,EAFqBC,UAGrBA,IAMA,MAAMC,GAAaC,aACjB,0DACA,0BACA,0DACA,6BACA,6CACAF,GAGF,OACE,EAAAzB,EAAAiB,KAAC,SAAD,CAAQQ,UAAWC,EAAYF,QAASA,E,SACrCD,G,CAKP,SAASK,GAAcL,SACrBA,EADqBC,QAErBA,EAFqBC,UAGrBA,IAMA,MAAMC,GAAaC,aACjB,sCACA,kCACA,2CACA,6CACA,kBACAF,GAGF,OACE,EAAAzB,EAAAiB,KAAC,SAAD,CAAQQ,UAAWC,EAAYF,QAASA,E,SACrCD,G,CAsBA,SAASJ,GAAcJ,QAC5BA,EAD4BK,eAE5BA,EAF4BC,kBAG5BA,EAH4BQ,eAK5BA,IAEA,OAAKd,GAKH,EAAAf,EAAA8B,MAAC,MAAD,CAAKL,UAAU,gB,UACZV,EAAQR,UACP,EAAAP,EAAAiB,KAACc,EAAD,CAAeP,QAASK,E,UACtB,EAAA7B,EAAA8B,MAAC,MAAD,CAAKL,UAAU,sB,UACZO,OAAOC,WAAWlB,EAAQR,QAAQ2B,WAAWC,iBAAkB,IAC/DpB,EAAQR,QAAQ6B,OAAOC,0BAK9B,EAAArC,EAAA8B,MAACQ,EAAAC,KAAD,CAAMC,GAAG,MAAMf,UAAU,kC,WACvB,EAAAzB,EAAAiB,KAACqB,EAAAC,KAAKE,OAAN,CAAaD,GAAG,MAAMf,UAAU,qC,UAC9B,EAAAzB,EAAA8B,MAACY,EAAD,C,WACE,EAAA1C,EAAAiB,KAAC,MAAD,CAAKQ,UAAU,iC,UACZkB,yBAAoB5B,EAAQX,YAE/B,EAAAJ,EAAAiB,KAAC2B,EAAAC,UAAD,CACEzC,QAASW,EAAQX,QACjB0C,KAAM,GACNrB,UAAU,oBAKhB,EAAAzB,EAAAiB,KAACqB,EAAAS,WAAD,CACEP,GAAIQ,WACJC,MAAM,mCACNC,UAAU,+BACVC,QAAQ,kCACRC,MAAM,iCACNC,UAAU,kCACVC,QAAQ,+B,UAER,EAAAtD,EAAAiB,KAACqB,EAAAC,KAAKgB,MAAN,CAAY9B,UAAU,oG,SACnBJ,IACC,EAAArB,EAAAiB,KAACqB,EAAAC,KAAKiB,KAAN,CACEhB,GAAG,SACHf,UAAU,2IACVD,QAASH,E,SAJzB,0BAtCW,EAAArB,EAAAiB,KAACwC,EAAAhB,OAAD,CAAQjB,QAASJ,E,SAAgB,kB","sources":["src/components/ConnectButton.tsx","src/components/AccountButton.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useAccount, useBalance, useDisconnect } from 'wagmi';\nimport { useOnboarding } from '../OnboardingContainer';\nimport { AccountButton } from './AccountButton';\n\nexport function ConnectButton() {\n  const { isConnected, address } = useAccount();\n  const { data: balance } = useBalance({\n    addressOrName: address,\n    watch: true,\n  });\n  const { disconnect } = useDisconnect();\n  const { connectWallet } = useOnboarding();\n\n  const account = useMemo(() => {\n    if (!isConnected || !address) {\n      return undefined;\n    }\n\n    return {\n      address,\n      balance,\n    };\n  }, [address, balance, isConnected]);\n\n  return (\n    <AccountButton\n      onConnectClick={connectWallet}\n      onDisconnectClick={disconnect}\n      account={account}\n    />\n  );\n}\n\nexport { ConnectButton as default };\n","import React, { Fragment, ReactElement, ReactNode } from 'react';\nimport clsx from 'clsx';\nimport { Button } from './Button';\nimport { IdentIcon } from './IdentIcon';\nimport type { BigNumber } from 'ethers';\nimport { Menu, Transition } from '@headlessui/react';\nimport { getFormattedAddress } from '../utils/getFormattedAddress';\n\nfunction AddressButton({\n  children,\n  onClick,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n  onClick?: () => void;\n}) {\n  const classNames = clsx(\n    'h-[36px] px-[8px] py-[6px] appearance-none outline-none',\n    'rounded-[6px] font-sans',\n    'flex flex-row space-x-[8px] justify-center items-center',\n    'bg-white hover:bg-white/90',\n    'transition-colors duration-150 ease-linear',\n    className,\n  );\n\n  return (\n    <button className={classNames} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nfunction BalanceButton({\n  children,\n  onClick,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n  onClick?: () => void;\n}) {\n  const classNames = clsx(\n    'font-serif text-base leading-[24px]',\n    'px-[20px] py-[8px] rounded-none',\n    'text-white bg-primary hover:bg-[#20d775]',\n    'transition-colors duration-150 ease-linear',\n    'rounded-l-[8px]',\n    className,\n  );\n\n  return (\n    <button className={classNames} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nexport interface AccountButtonProps {\n  account?: {\n    address: string;\n    balance?: {\n      decimals: number;\n      formatted: string;\n      symbol: string;\n      value: BigNumber;\n    };\n  };\n  symbol?: string;\n  onConnectClick?: () => void;\n  onDisconnectClick?: () => void;\n  onAddressClick?: () => void;\n  onBalanceClick?: () => void;\n}\n\nexport function AccountButton({\n  account,\n  onConnectClick,\n  onDisconnectClick,\n  // onAddressClick,\n  onBalanceClick,\n}: AccountButtonProps): ReactElement {\n  if (!account) {\n    return <Button onClick={onConnectClick}>Connect Wallet</Button>;\n  }\n\n  return (\n    <div className=\"flex flex-row\">\n      {account.balance && (\n        <BalanceButton onClick={onBalanceClick}>\n          <div className=\"mb-[-4px] font-bold\">\n            {Number.parseFloat(account.balance.formatted).toLocaleString()}{' '}\n            {account.balance.symbol.toLocaleUpperCase()}\n          </div>\n        </BalanceButton>\n      )}\n\n      <Menu as=\"div\" className=\"relative inline-block text-left\">\n        <Menu.Button as=\"div\" className=\"rounded-r-[8px] bg-primary p-[2px]\">\n          <AddressButton>\n            <div className=\"text-[14px] font-medium flex-1\">\n              {getFormattedAddress(account.address)}\n            </div>\n            <IdentIcon\n              address={account.address}\n              size={16}\n              className=\"flex-none\"\n            />\n          </AddressButton>\n        </Menu.Button>\n\n        <Transition\n          as={Fragment}\n          enter=\"transition ease-out duration-100\"\n          enterFrom=\"transform opacity-0 scale-95\"\n          enterTo=\"transform opacity-100 scale-100\"\n          leave=\"transition ease-in duration-75\"\n          leaveFrom=\"transform opacity-100 scale-100\"\n          leaveTo=\"transform opacity-0 scale-95\"\n        >\n          <Menu.Items className=\"absolute right-0 mt-2 w-40 origin-top-right rounded-md bg-white focus:outline-none shadow-lg py-1\">\n            {onDisconnectClick && (\n              <Menu.Item\n                as=\"button\"\n                className=\"py-[6px] px-[16px] leading-[24px] hover:bg-light-green hover:text-primary transition-colors duration-150 ease-out block w-full text-left\"\n                onClick={onDisconnectClick}\n              >\n                Disconnect\n              </Menu.Item>\n            )}\n          </Menu.Items>\n        </Transition>\n      </Menu>\n    </div>\n  );\n}\n"],"names":["$21Wcl","parcelRequire","ConnectButton","isConnected","address","useAccount","data","balance","useBalance","addressOrName","watch","disconnect","useDisconnect","connectWallet","useOnboarding","account","useMemo","jsx","$aBr8q","AccountButton","onConnectClick","onDisconnectClick","AddressButton","children","onClick","className","classNames","clsx","BalanceButton","onBalanceClick","jsxs","$d7ff0ae32ac862a5$var$BalanceButton","Number","parseFloat","formatted","toLocaleString","symbol","toLocaleUpperCase","$dbDlp","Menu","as","Button","$d7ff0ae32ac862a5$var$AddressButton","getFormattedAddress","$02Nru","IdentIcon","size","Transition","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Items","Item","$4dJwt"],"version":3,"file":"ConnectButton.b292d7dc.js.map"}