{"mappings":"ueAAA,IAAAA,EAAAC,EAAA,S,oDAKO,SAASC,IACd,MAAMC,YAAEA,EAAFC,QAAeA,IAAYC,mBACzBC,KAAMC,IAAYC,gBAAW,CACnCC,cAAeL,EACfM,OAAO,KAEHC,WAAEA,IAAeC,sBACjBC,cAAEA,IAAkBC,qBAEpBC,GAAgBC,kBAAY,KAChCH,MACC,CAACA,IAEEI,GAAmBD,kBAAY,KACnCL,MACC,CAACA,IAEEO,GAAUC,cAAQ,KACtB,GAAKhB,GAAgBC,EAIrB,MAAO,C,QACLA,E,QACAG,EAFF,GAIC,CAACH,EAASG,EAASJ,IAEtB,OACE,EAAAH,EAAAoB,KAACC,EAAAC,cAAD,CACEC,eAAgBR,EAChBS,kBAAmBP,EACnBC,QAASA,G,2FCrCf,IAAAlB,EAAAC,EAAA,S,8EAQA,SAASwB,GAAcC,SACrBA,EADqBC,QAErBA,EAFqBC,UAGrBA,IAMA,MAAMC,GAAaC,aACjB,0DACA,0BACA,0DACA,6BACA,6CACAF,GAGF,OACE,EAAA5B,EAAAoB,KAAC,SAAD,CAAQQ,UAAWC,EAAYF,QAASA,E,SACrCD,G,CAKP,SAASK,GAAcL,SACrBA,EADqBC,QAErBA,EAFqBC,UAGrBA,IAMA,MAAMC,GAAaC,aACjB,sCACA,kCACA,2CACA,6CACA,kBACAF,GAGF,OACE,EAAA5B,EAAAoB,KAAC,SAAD,CAAQQ,UAAWC,EAAYF,QAASA,E,SACrCD,G,CAsBA,SAASJ,GAAcJ,QAC5BA,EAD4BK,eAE5BA,EAF4BC,kBAG5BA,EAH4BQ,eAK5BA,IAEA,OAAKd,GAKH,EAAAlB,EAAAiC,MAAC,MAAD,CAAKL,UAAU,gB,UACZV,EAAQX,UACP,EAAAP,EAAAoB,KAACc,EAAD,CAAeP,QAASK,E,UACtB,EAAAhC,EAAAiC,MAAC,MAAD,CAAKL,UAAU,sB,UACZO,OAAOC,WAAWlB,EAAQX,QAAQ8B,WAAWC,iBAAkB,IAC/DpB,EAAQX,QAAQgC,OAAOC,0BAK9B,EAAAxC,EAAAiC,MAACQ,EAAAC,KAAD,CAAMC,GAAG,MAAMf,UAAU,kC,WACvB,EAAA5B,EAAAoB,KAACqB,EAAAC,KAAKE,OAAN,CAAaD,GAAG,MAAMf,UAAU,qC,UAC9B,EAAA5B,EAAAiC,MAACY,EAAD,C,WACE,EAAA7C,EAAAoB,KAAC,MAAD,CAAKQ,UAAU,iC,UACZkB,yBAAoB5B,EAAQd,YAE/B,EAAAJ,EAAAoB,KAAC2B,EAAAC,UAAD,CACE5C,QAASc,EAAQd,QACjB6C,KAAM,GACNrB,UAAU,oBAKhB,EAAA5B,EAAAoB,KAACqB,EAAAS,WAAD,CACEP,GAAIQ,WACJC,MAAM,mCACNC,UAAU,+BACVC,QAAQ,kCACRC,MAAM,iCACNC,UAAU,kCACVC,QAAQ,+B,UAER,EAAAzD,EAAAoB,KAACqB,EAAAC,KAAKgB,MAAN,CAAY9B,UAAU,oG,SACnBJ,IACC,EAAAxB,EAAAoB,KAACqB,EAAAC,KAAKiB,KAAN,CACEhB,GAAG,SACHf,UAAU,2IACVD,QAASH,E,SAJzB,0BAtCW,EAAAxB,EAAAoB,KAACwC,EAAAhB,OAAD,CAAQjB,QAASJ,E,SAAgB,kB,uCCnFrC,SAASuB,EAAoB1C,EAAiByD,EAAS,EAAGC,EAAQ,GACvE,MAAMC,EAAQ3D,EAAQ4D,oBAEtB,MAAQ,GAAED,EAAME,MAAM,EAAGJ,QAAaE,EAAME,OAAM,EAAKH,I","sources":["src/components/ConnectButton.tsx","src/components/AccountButton.tsx","src/utils/getFormattedAddress.ts"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { useAccount, useBalance, useDisconnect } from 'wagmi';\nimport { useOnboarding } from '../OnboardingContainer';\nimport { AccountButton } from './AccountButton';\n\nexport function ConnectButton() {\n  const { isConnected, address } = useAccount();\n  const { data: balance } = useBalance({\n    addressOrName: address,\n    watch: true,\n  });\n  const { disconnect } = useDisconnect();\n  const { connectWallet } = useOnboarding();\n\n  const handleConnect = useCallback(() => {\n    connectWallet();\n  }, [connectWallet]);\n\n  const handleDisconnect = useCallback(() => {\n    disconnect();\n  }, [disconnect]);\n\n  const account = useMemo(() => {\n    if (!isConnected || !address) {\n      return undefined;\n    }\n\n    return {\n      address,\n      balance,\n    };\n  }, [address, balance, isConnected]);\n\n  return (\n    <AccountButton\n      onConnectClick={handleConnect}\n      onDisconnectClick={handleDisconnect}\n      account={account}\n    />\n  );\n}\n\nexport { ConnectButton as default };\n","import React, { Fragment, ReactElement, ReactNode } from 'react';\nimport clsx from 'clsx';\nimport { Button } from './Button';\nimport { IdentIcon } from './IdentIcon';\nimport type { BigNumber } from 'ethers';\nimport { Menu, Transition } from '@headlessui/react';\nimport { getFormattedAddress } from '../utils/getFormattedAddress';\n\nfunction AddressButton({\n  children,\n  onClick,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n  onClick?: () => void;\n}) {\n  const classNames = clsx(\n    'h-[36px] px-[8px] py-[6px] appearance-none outline-none',\n    'rounded-[6px] font-sans',\n    'flex flex-row space-x-[8px] justify-center items-center',\n    'bg-white hover:bg-white/90',\n    'transition-colors duration-150 ease-linear',\n    className,\n  );\n\n  return (\n    <button className={classNames} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nfunction BalanceButton({\n  children,\n  onClick,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n  onClick?: () => void;\n}) {\n  const classNames = clsx(\n    'font-serif text-base leading-[24px]',\n    'px-[20px] py-[8px] rounded-none',\n    'text-white bg-primary hover:bg-[#20d775]',\n    'transition-colors duration-150 ease-linear',\n    'rounded-l-[8px]',\n    className,\n  );\n\n  return (\n    <button className={classNames} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nexport interface AccountButtonProps {\n  account?: {\n    address: string;\n    balance?: {\n      decimals: number;\n      formatted: string;\n      symbol: string;\n      value: BigNumber;\n    };\n  };\n  symbol?: string;\n  onConnectClick?: () => void;\n  onDisconnectClick?: () => void;\n  onAddressClick?: () => void;\n  onBalanceClick?: () => void;\n}\n\nexport function AccountButton({\n  account,\n  onConnectClick,\n  onDisconnectClick,\n  // onAddressClick,\n  onBalanceClick,\n}: AccountButtonProps): ReactElement {\n  if (!account) {\n    return <Button onClick={onConnectClick}>Connect Wallet</Button>;\n  }\n\n  return (\n    <div className=\"flex flex-row\">\n      {account.balance && (\n        <BalanceButton onClick={onBalanceClick}>\n          <div className=\"mb-[-4px] font-bold\">\n            {Number.parseFloat(account.balance.formatted).toLocaleString()}{' '}\n            {account.balance.symbol.toLocaleUpperCase()}\n          </div>\n        </BalanceButton>\n      )}\n\n      <Menu as=\"div\" className=\"relative inline-block text-left\">\n        <Menu.Button as=\"div\" className=\"rounded-r-[8px] bg-primary p-[2px]\">\n          <AddressButton>\n            <div className=\"text-[14px] font-medium flex-1\">\n              {getFormattedAddress(account.address)}\n            </div>\n            <IdentIcon\n              address={account.address}\n              size={16}\n              className=\"flex-none\"\n            />\n          </AddressButton>\n        </Menu.Button>\n\n        <Transition\n          as={Fragment}\n          enter=\"transition ease-out duration-100\"\n          enterFrom=\"transform opacity-0 scale-95\"\n          enterTo=\"transform opacity-100 scale-100\"\n          leave=\"transition ease-in duration-75\"\n          leaveFrom=\"transform opacity-100 scale-100\"\n          leaveTo=\"transform opacity-0 scale-95\"\n        >\n          <Menu.Items className=\"absolute right-0 mt-2 w-40 origin-top-right rounded-md bg-white focus:outline-none shadow-lg py-1\">\n            {onDisconnectClick && (\n              <Menu.Item\n                as=\"button\"\n                className=\"py-[6px] px-[16px] leading-[24px] hover:bg-light-green hover:text-primary transition-colors duration-150 ease-out block w-full text-left\"\n                onClick={onDisconnectClick}\n              >\n                Disconnect\n              </Menu.Item>\n            )}\n          </Menu.Items>\n        </Transition>\n      </Menu>\n    </div>\n  );\n}\n","export function getFormattedAddress(address: string, before = 4, after = 4) {\n  const lower = address.toLocaleLowerCase();\n\n  return `${lower.slice(0, before)}...${lower.slice(-1 * after)}`;\n}\n"],"names":["$g1qy9","parcelRequire","ConnectButton","isConnected","address","useAccount","data","balance","useBalance","addressOrName","watch","disconnect","useDisconnect","connectWallet","useOnboarding","handleConnect","useCallback","handleDisconnect","account","useMemo","jsx","$19May","AccountButton","onConnectClick","onDisconnectClick","AddressButton","children","onClick","className","classNames","clsx","BalanceButton","onBalanceClick","jsxs","$2a17730976ea5d40$var$BalanceButton","Number","parseFloat","formatted","toLocaleString","symbol","toLocaleUpperCase","$2qAWR","Menu","as","Button","$2a17730976ea5d40$var$AddressButton","getFormattedAddress","$bSZXL","IdentIcon","size","Transition","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Items","Item","$1cmhB","before","after","lower","toLocaleLowerCase","slice"],"version":3,"file":"ConnectButton.915eae1b.js.map"}